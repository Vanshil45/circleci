# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Courses {
  courseName: String
  courseStatus: String
  publication: String
  year: Int
}

type Address {
  mainAddress: String
  city: String
  pincode: Float
}

type Unit {
  quantity: Float
  pricePerUnit: Float
  totalPrice: Float
}

type Description {
  label: String
  unit: Unit
}

type Product {
  name: String
  description: Description
  ingridients: [String!]
  manufacturer: String
}

type User {
  _id: ID
  name: String
  username: String
  email: String
  password: String
  gender: Gender
  role: Role
  address: Address
  courses: [Courses!]!
  age: Float!
  lastCourse: Courses
  completedCourses: [Courses!]
  product: [Product!]!
  filterProducts: [Product!]!
  totalSumPrice: Float
  OveralltotalSumPrice: Float
  allCourses: [Courses!]
  token: String
  privateKey: String
  countryCode: String
  mobileNumber: Float
  githubId: String
}

"""This denote user gender"""
enum Gender {
  Male
  Female
}

"""This denote user role"""
enum Role {
  admin
  user
  superadmin
}

type AccessTokenResponse {
  access_token: String
  token_type: String
  refresh_token: String
  expires_in: String
}

type GithubAuthResponse {
  githubAuthUrl: String
}

type Author {
  firstName: ID
  lastName: String
  age: Int
}

type Book {
  _id: ID
  title: String
  price: Int
  year: Int
  author: [Author!]
  userId: ID
  userCollection: User
  authorCollection: Author
  authorId: ID
}

type GitHubUserDetails {
  _id: ID!
  username: String
  email: String
  name: String
  githubUserMetadata: JSONObject
  access_token: String
  token_type: String
  refresh_token: String
  expires_in: Float
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject

type GitHubRepository {
  user_id: ID!
  repository_type: RepositoryType!
  id: String
  name: String
  description: String
  url: String
  githubRepositoryMetadata: JSONObject
}

"""This denote repository type"""
enum RepositoryType {
  UserRepo
  OrganizationRepo
}

type GitHubUserOrganization {
  id: Float
  user_id: ID!
  org_name: String
  node_id: String
  url: String
  repos_url: String
  members_url: String
}

input InputCourses {
  courseName: String
  courseStatus: String
  publication: String
  year: Int
}

input InputAddress {
  mainAddress: String
  city: String
  pincode: Float
}

input Units {
  quantity: Float
  pricePerUnit: Float
  totalPrice: Float
}

input Descriptions {
  label: String
  unit: Units
}

input InputProduct {
  name: String
  description: Descriptions
  ingridients: [String!]
  manufacturer: String
}

input InputBook {
  firstName: ID
  lastName: String
  age: Int
}

type Query {
  index: String!
  findAllUser(role: String!, minAge: Float!, maxAge: Float!): [User!]!
  findUserAll: [User!]!
  findUserByMatch(role: String!): [User!]!
  findUserByQty(quantity: Float!): [User!]!
  totalSumPrice: Float!
  getAllCourses: [User!]!
  findOne(email: String!): User!
  findEmail(email: String!): User!
  getGithubUserDetails(username: String!): GitHubUserDetails!
  findAllBookUser: [Book!]!
  findAllAuhtor: [Book!]!
  githubRepositories(username: String!): [GitHubRepository!]!
  githubOrganizationRepositories(username: String!, org_name: String!): [GitHubRepository!]!
  githubUserOrganizations(username: String!): [GitHubUserOrganization!]!
}

type Mutation {
  createUser(payload: UserInput!): User!
  updateUser(email: String!, payload: UserInput!): User!
  deleteUser(id: String!): User!
  githubLogin: GithubAuthResponse!
  githubCodeExchange(code: String!): AccessTokenResponse!
  getGithubUser(accessToken: String!): GitHubUserDetails!
  createBook(title: String!, author: [InputBook!]!, price: Float!, year: Float!, userId: String!): Book!
  updateBook(bookInput: BookInput!, _id: String!): Book!
  login(email: String!, password: String!): String!
  logout(email: String!): String!
  checkDate(date: String!): String!
}

input UserInput {
  name: String
  username: String
  email: String
  password: String
  gender: Gender
  role: Role
  address: InputAddress
  courses: [InputCourses!]
  age: Int
  lastCourse: InputCourses
  completedCourses: [InputCourses!]
  product: [InputProduct!]
  token: String
  privateKey: String
  countryCode: String
  mobileNumber: Float
  githubId: String
}

input BookInput {
  _id: ID
  title: String
  price: Float
  year: Float
  author: [AuthorInput!]
  userId: String
  userCollection: UserInput
  authorCollection: AuthorInput
  authorId: ID
}

input AuthorInput {
  _id: String
  firstName: String
  lastName: String
  age: Int
}